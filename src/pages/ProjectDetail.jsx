import { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { Swiper, SwiperSlide } from 'swiper/react'
import { Navigation, Pagination, Thumbs, Autoplay } from 'swiper/modules'
import { projectsData, statusConfig, categoryConfig } from '../data/projectsData'
import ThreeDModelViewer from '../components/ui/ThreeDModelViewer'

// Import Swiper styles
import 'swiper/css'
import 'swiper/css/navigation'
import 'swiper/css/pagination'
import 'swiper/css/thumbs'

const ProjectDetail = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const [project, setProject] = useState(null)
  const [thumbsSwiper, setThumbsSwiper] = useState(null)
  const [activeTab, setActiveTab] = useState('overview')
  const [imageLoading, setImageLoading] = useState(true)

  useEffect(() => {
    const projectId = parseInt(id)
    const foundProject = projectsData.find(p => p.id === projectId)
    
    if (foundProject) {
      setProject(foundProject)
      // Create gallery images array - using project images multiple times for demo
      const galleryImages = [
        foundProject.image,
        '/src/assets/images/001.jpg',
        '/src/assets/images/002.jpg',
        '/src/assets/images/003.jpg',
        '/src/assets/images/slider01.jpg',
        foundProject.image, // Duplicate for more gallery items
      ]
      setProject({...foundProject, galleryImages})
    }
  }, [id])

  if (!project) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin w-16 h-16 border-4 border-gold-500 border-t-transparent rounded-full mx-auto mb-4"></div>
          <h2 className="text-2xl font-semibold text-primary-900 mb-2">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç...</h2>
          <p className="text-primary-600">–ú–æ–ª—è, –∏–∑—á–∞–∫–∞–π—Ç–µ</p>
        </div>
      </div>
    )
  }

  const tabs = [
    { id: 'overview', label: '–û–±—â –ø—Ä–µ–≥–ª–µ–¥', icon: 'üè¢' },
    { id: 'gallery', label: '–ì–∞–ª–µ—Ä–∏—è', icon: 'üì∏' },
    { id: '3d-model', label: '3D –ú–æ–¥–µ–ª', icon: 'üéØ' },
    { id: 'specifications', label: '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏', icon: 'üìã' }
  ]

  const specifications = [
    { label: '–û–±—â–∞ –ø–ª–æ—â', value: project.area },
    { label: '–ì–æ–¥–∏–Ω–∞ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ', value: project.year },
    { label: '–ö–ª–∏–µ–Ω—Ç', value: project.client },
    { label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', value: categoryConfig[project.category]?.label },
    { label: '–°—Ç–∞—Ç—É—Å', value: statusConfig[project.status]?.label },
    { label: '–ï—Ç–∞–∂–∏', value: project.category === 'residential' ? '5-12' : project.category === 'commercial' ? '15-25' : '1-2' },
    { label: '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏', value: project.category === 'residential' ? '45-120' : '–ù/–ü' },
    { label: '–ü–∞—Ä–∫–æ–º–µ—Å—Ç–∞', value: project.category === 'industrial' ? '50+' : project.category === 'commercial' ? '200+' : '1 –Ω–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç' }
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      
      {/* Hero Image Section */}
      <section className="relative h-screen">
        <div className="absolute inset-0">
          <img
            src={project.image}
            alt={project.name}
            className={`w-full h-full object-cover transition-opacity duration-500 ${
              imageLoading ? 'opacity-0' : 'opacity-100'
            }`}
            onLoad={() => setImageLoading(false)}
          />
          {imageLoading && (
            <div className="absolute inset-0 bg-primary-200 animate-pulse flex items-center justify-center">
              <div className="text-center">
                <div className="w-16 h-16 border-4 border-gold-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                <p className="text-primary-600">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ...</p>
              </div>
            </div>
          )}
        </div>
        
        {/* Dark Overlay */}
        <div className="absolute inset-0 bg-black/40"></div>
        
        {/* Content Overlay */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center text-white px-4">
            <div className="mb-4">
              <span className={`inline-block px-4 py-2 rounded-full text-sm font-semibold ${statusConfig[project.status]?.className} bg-opacity-90`}>
                {statusConfig[project.status]?.label}
              </span>
            </div>
            
            <h1 className="text-5xl md:text-6xl font-bold mb-6 leading-tight">
              {project.name}
            </h1>
            
            <div className="flex items-center justify-center text-xl mb-8">
              <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {project.location}
            </div>
            
            <p className="text-xl md:text-2xl max-w-3xl mx-auto leading-relaxed mb-8">
              {project.description}
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button
                onClick={() => setActiveTab('gallery')}
                className="bg-gradient-to-r from-gold-500 to-gold-600 hover:from-gold-600 hover:to-gold-700 text-primary-900 px-8 py-3 rounded-luxury font-semibold transition-all duration-200 shadow-gold-glow hover:shadow-gold-glow-lg"
              >
                –†–∞–∑–≥–ª–µ–¥–∞–π –≥–∞–ª–µ—Ä–∏—è—Ç–∞
              </button>
              <button
                onClick={() => setActiveTab('3d-model')}
                className="border-2 border-gold-500/50 text-white hover:bg-gold-500 hover:text-primary-900 px-8 py-3 rounded-luxury font-semibold transition-all duration-200 backdrop-blur-sm"
              >
                3D –ú–æ–¥–µ–ª
              </button>
            </div>
          </div>
        </div>
        
        {/* Back Button */}
        <button
          onClick={() => navigate('/projects')}
          className="absolute top-8 left-8 bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white p-3 rounded-lg transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
      </section>

      {/* Navigation Tabs */}
      <section className="sticky top-20 bg-white border-b border-gray-200 z-30">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex overflow-x-auto">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-gold-600 text-gold-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Tab Content */}
      <section className="py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          
          {/* Overview Tab */}
          {activeTab === 'overview' && (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
              
              {/* Project Description */}
              <div className="lg:col-span-2">
                <h2 className="text-3xl font-bold text-gray-900 mb-6">–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 leading-relaxed mb-6">
                    {project.description} –¢–æ–∑–∏ –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –≤—ä—Ä—Ö–æ–≤–æ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ —Å—ä–≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, 
                    —Å—ä—á–µ—Ç–∞–≤–∞–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç —Å –µ—Å—Ç–µ—Ç–∏–∫–∞. –í—Å–µ–∫–∏ –¥–µ—Ç–∞–π–ª –µ –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ –æ–±–º–∏—Å–ª–µ–Ω, –∑–∞ –¥–∞ –æ—Å–∏–≥—É—Ä–∏ 
                    –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É–¥–æ–±—Å—Ç–≤–æ –∑–∞ –æ–±–∏—Ç–∞—Ç–µ–ª–∏—Ç–µ.
                  </p>
                  
                  <h3 className="text-xl font-semibold text-gray-900 mb-4">–ö–ª—é—á–æ–≤–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    {project.features.map((feature, index) => (
                      <div key={index} className="flex items-center">
                        <svg className="w-5 h-5 text-green-500 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        <span className="text-gray-700">{feature}</span>
                      </div>
                    ))}
                  </div>
                  
                  <p className="text-gray-700 leading-relaxed">
                    –ü—Ä–æ–µ–∫—Ç—ä—Ç –µ —Ä–µ–∞–ª–∏–∑–∏—Ä–∞–Ω —Å –Ω–∞–π-–≤–∏—Å–æ–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç, –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ 
                    –Ω–∞–π-–Ω–æ–≤–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—Å—Ç–≤–æ—Ç–æ. –í—Å–∏—á–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏ —Å–∞ —Ç—â–∞—Ç–µ–ª–Ω–æ –ø–æ–¥–±—Ä–∞–Ω–∏ –∑–∞ 
                    –¥—ä–ª–≥–æ—Ç—Ä–∞–π–Ω–æ—Å—Ç –∏ –µ–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç.
                  </p>
                </div>
              </div>
              
              {/* Project Stats */}
              <div>
                <h3 className="text-2xl font-bold text-gray-900 mb-6">–û—Å–Ω–æ–≤–Ω–∏ –¥–∞–Ω–Ω–∏</h3>
                <div className="bg-white rounded-lg shadow-md p-6 space-y-4">
                  {specifications.slice(0, 5).map((spec, index) => (
                    <div key={index} className="flex justify-between items-center border-b border-gray-100 pb-3">
                      <span className="text-gray-600 font-medium">{spec.label}</span>
                      <span className="text-gray-900 font-semibold">{spec.value}</span>
                    </div>
                  ))}
                </div>
                
                {/* Category Badge */}
                <div className="mt-6">
                  <span className={`inline-block px-4 py-2 rounded-lg text-sm font-medium ${categoryConfig[project.category]?.className}`}>
                    {categoryConfig[project.category]?.label}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Gallery Tab */}
          {activeTab === 'gallery' && (
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">–ì–∞–ª–µ—Ä–∏—è</h2>
              
              {/* Main Gallery */}
              <div className="mb-8">
                <Swiper
                  modules={[Navigation, Pagination, Thumbs, Autoplay]}
                  spaceBetween={30}
                  navigation={true}
                  pagination={{ clickable: true }}
                  thumbs={{ swiper: thumbsSwiper }}
                  autoplay={{ delay: 5000, disableOnInteraction: false }}
                  className="rounded-lg shadow-lg h-96 md:h-[500px] lg:h-[600px]"
                >
                  {project.galleryImages.map((image, index) => (
                    <SwiperSlide key={index}>
                      <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                        <img
                          src={image}
                          alt={`${project.name} - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`}
                          className="w-full h-full object-cover"
                        />
                      </div>
                    </SwiperSlide>
                  ))}
                </Swiper>
              </div>
              
              {/* Thumbnails */}
              <Swiper
                onSwiper={setThumbsSwiper}
                spaceBetween={10}
                slidesPerView={4}
                freeMode={true}
                watchSlidesProgress={true}
                breakpoints={{
                  640: { slidesPerView: 6 },
                  768: { slidesPerView: 8 },
                  1024: { slidesPerView: 10 }
                }}
                className="thumbs-swiper"
              >
                {project.galleryImages.map((image, index) => (
                  <SwiperSlide key={index} className="cursor-pointer">
                    <div className="aspect-square rounded-lg overflow-hidden opacity-60 hover:opacity-100 transition-opacity">
                      <img
                        src={image}
                        alt={`–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ${index + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  </SwiperSlide>
                ))}
              </Swiper>
            </div>
          )}

          {/* 3D Model Tab */}
          {activeTab === '3d-model' && (
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">3D –ú–æ–¥–µ–ª</h2>
              <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                <ThreeDModelViewer project={project} className="h-[600px]" />
              </div>
              <div className="mt-6 text-center">
                <p className="text-gray-600 mb-4">
                  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω 3D –º–æ–¥–µ–ª –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞. –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –º–∏—à–∫–∞—Ç–∞ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ—Ç–æ.
                </p>
                <div className="flex justify-center space-x-6 text-sm text-gray-500">
                  <div className="flex items-center">
                    <span className="w-3 h-3 bg-gold-500 rounded-full mr-2"></span>
                    –ó–∞–≤—ä—Ä—Ç–∞–Ω–µ: –õ—è–≤ –±—É—Ç–æ–Ω
                  </div>
                  <div className="flex items-center">
                    <span className="w-3 h-3 bg-green-500 rounded-full mr-2"></span>
                    –ú–∞—â–∞–±–∏—Ä–∞–Ω–µ: –ö–æ–ª–µ–ª—Ü–µ
                  </div>
                  <div className="flex items-center">
                    <span className="w-3 h-3 bg-purple-500 rounded-full mr-2"></span>
                    –ü—Ä–∏–¥–≤–∏–∂–≤–∞–Ω–µ: –î–µ—Å–µ–Ω –±—É—Ç–æ–Ω
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Specifications Tab */}
          {activeTab === 'specifications' && (
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                
                {/* General Specs */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <svg className="w-6 h-6 mr-2 text-gold-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                    –û–±—â–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                  </h3>
                  <div className="space-y-4">
                    {specifications.map((spec, index) => (
                      <div key={index} className="flex justify-between items-center py-2 border-b border-gray-100">
                        <span className="text-gray-600 font-medium">{spec.label}</span>
                        <span className="text-gray-900 font-semibold">{spec.value}</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Construction Details */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <svg className="w-6 h-6 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    –°—Ç—Ä–æ–∏—Ç–µ–ª–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏
                  </h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</span>
                      <span className="text-gray-900 font-medium">–°—Ç–æ–º–∞–Ω–æ–±–µ—Ç–æ–Ω–Ω–∞</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–¢–æ–ø–ª–æ–∏–∑–æ–ª–∞—Ü–∏—è</span>
                      <span className="text-gray-900 font-medium">–ú–∏–Ω–µ—Ä–∞–ª–Ω–∞ –≤–∞—Ç–∞ 15—Å–º</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–î–æ–≥—Ä–∞–º–∞</span>
                      <span className="text-gray-900 font-medium">PVC 6-–∫–∞–º–µ—Ä–Ω–∞</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–ü–æ–∫—Ä–∏–≤</span>
                      <span className="text-gray-900 font-medium">–ö–µ—Ä–µ–º–∏–¥–∏ –ë—Ä–∞–∞—Å</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–§–∞—Å–∞–¥–∞</span>
                      <span className="text-gray-900 font-medium">–°–∏–ª–∏–∫–∞—Ç–Ω–∞ –º–∞–∑–∏–ª–∫–∞</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600">–ï–Ω–µ—Ä–≥. –∫–ª–∞—Å</span>
                      <span className="text-green-600 font-semibold">A+</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </section>

      {/* Related Projects */}
      <section className="py-16 bg-white border-t">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">–ü–æ–¥–æ–±–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∏</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {projectsData
              .filter(p => p.id !== project.id && p.category === project.category)
              .slice(0, 3)
              .map(relatedProject => (
                <div key={relatedProject.id} className="bg-gray-50 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow">
                  <div className="aspect-video bg-gray-200">
                    <img
                      src={relatedProject.image}
                      alt={relatedProject.name}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">{relatedProject.name}</h3>
                    <p className="text-gray-600 text-sm mb-4">{relatedProject.location}</p>
                    <button
                      onClick={() => navigate(`/projects/${relatedProject.id}`)}
                      className="text-gold-600 hover:text-gold-700 font-medium text-sm"
                    >
                      –í–∏–∂ –¥–µ—Ç–∞–π–ª–∏ ‚Üí
                    </button>
                  </div>
                </div>
              ))}
          </div>
        </div>
      </section>
    </div>
  )
}

export default ProjectDetail